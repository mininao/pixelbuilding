{"name":"Pixelbuilding","tagline":"Pixel grid on a building","body":"# PixelBuilding\r\nUtilisez un bâtiment comme écran géant !  \r\nInspiré du [MIT Tetris hack](https://www.youtube.com/watch?v=bDo4Pjk6fsk)  \r\nSommaire :  \r\n\r\n1. Présentation du projet\r\n2. Démonstration (Comment tester)\r\n4. Fonctionnalités\r\n5. Évolutions futures  \r\n\r\nVous pouvez aussi voir les slides de mon oral ici : [http://slides.com/aicimaxence/pixel-building/embed](http://slides.com/aicimaxence/pixel-building/embed)\r\n\r\n## Présentation du projet\r\nL'idée de départ de ce projet est d'utiliser les salles de classes d'un épi en tant que pixels d'un écran.  \r\nPour cela, la solution la plus simple était d'utiliser les vidéo projecteurs déjà présents dans les salles, et de les tourner vers le mur opposé à la fenêtre.  \r\nCôté logiciel, le plus simple était là encore d'utiliser un navigateur web dans chaque salle, nous permettant ainsi de nous passer de client lourd.\r\n\r\n## Démonstration\r\n\r\nPour tester, le projet, vous pouvez vous rendre à l'adresse communiquée.\r\nl'url `/pixel/test` permet de simuler le comportement des pixels (via des iframes)\r\nl'url `/pixel/dashboard` vous donne accès au panneau de contrôle\r\n\r\nNotez que cette version est (très) lente, puisqu'il s'agit en réalité d'un VPN vers un serveur pour utilisation locale à l'ESIEE\r\n\r\n## Fonctionnalités\r\n\r\n### Gestion d'un tableau de pixels\r\n\r\nChaque \"pixel\" possède un identifiant unique, des coordonnées, une couleur et un nom d'affichage.\r\nLe stockage, l'accès et la modification des pixels sont gérés par le module `core.js`\r\n\r\n### API HTTP\r\n\r\nPixelBuilding fournit des API simples en HTTP (gérées par `http_api.js`)\r\nVous pouvez par exemple essayer les requêtes suivantes :\r\n* GET /pixel/http_api/screens *Pour obtenir une liste json de tous les pixels*\r\n* GET /pixel/http_api/coordinates/X/Y *Pour obtenir les informations d'un pixel particulier*\r\n* POST /pixel/http_api/coordinates/X/Y?color=green *Pour changer la couleur d'un pixel*\r\n\r\n### Temps Réél avec les websockets\r\n\r\nPour accélérer la transmission des changements de couleur aux pixels, j'utilise la librairie [socket.io](http://socket.io/) qui permet une communication bilatérale client-serveur, et par conséquent de s'affranchir de la structure Requête-Réponse.\r\n\r\n### Dashboard simple et élégant\r\n\r\nAfin de permettre à l'utilisateur final d'utiliser PixelBuilding simplement, il a été nécessaire de créer un panneau de contrôle adapté. Celui-ci est conçu à l'aide de la partie \"grille\" du framework foundation et en scss\r\nCe panneau est toujours en construction et certaines de ses fonctionnalités ne sont pas disponibles","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}